********************************************Minimum swaps to sort an array consisting of permutation of n***************************

int ans = 0, n;
int arr[1001];
int visited[1001];
void dfs(int x) {
	visited[x] = true;
	if (visited[arr[x]]) {
		ans++;
	}
	else {
		dfs(arr[x]);
	}
	// if (x != arr[x - 1]) ans++;
}
int32_t main()
{
	i_n();
	// map<int,int> m;
	int n;
	cin >> n;
	// int arr[n];
	Rep(i, 1, n) {
		cin >> arr[i];
	}
	Rep(i, 1, n) {
		if (!visited[i]) {
			dfs(i);
		}
	}
	cout << n - ans << endl;
}



***********************************mergeksortedarrays*****************************************************************
#include<bits/stdc++.h>
using namespace std;

typedef pair<int,pair<int,int>> custompair;
vector<int> mergeksortedarrays(vector<vector<int>> nums){
	vector<int> sol;
	priority_queue<custompair,vector<custompair>,greater<custompair>> pq;
	for(int i=0;i<nums.size();i++){
		pq.push({nums[i][0],{i,0}});
	}
	while(!pq.empty()){
		custompair temp;
		temp=pq.top();
		pq.pop();
		sol.push_back(temp.first);
		int arr=temp.second.first;
		int col=temp.second.second;
		if(col+1<nums[arr].size()){
			pq.push({nums[arr][col+1],{arr,col+1}});
		}	
	}
	return sol;
}
int main(){
	vector<vector<int>> nums={{2,6,12,15},
							  {1,9,13,15},
							  {20,24,30,32}  
							};
	vector<int> sol;
	sol=mergeksortedarrays(nums);
	for(int i=0;i<sol.size();i++){
		cout<<sol[i]<<" ";
	}					
	return 0;
}

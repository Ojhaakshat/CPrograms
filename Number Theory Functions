int GCD(int A, int B) {
    if(B==0)
        return A;
    else
        return GCD(B, A % B);
}

int d, x, y;
void extendedEuclid(int A, int B) {
    if(B == 0) {
        d = A;
        x = 1;
        y = 0;
    }
    else {
        extendedEuclid(B, A%B);
        int temp = x;
        x = y;
        y = temp - (A/B)*y;
    }
}

int modInverse(int A, int M)
{
    extendedEuclid(A,M);
    return (x%M+M)%M;    //x may be negative
}

// when M is prime we can improve complexity of above code from O(m) to O(log M )

int modInverse(int A,int M)
{
    return modularExponentiation(A,M-2,M);
}

void checkprime(int N) {
        int count = 0;
        for( int i = 1;i * i <=N;++i ) {
             if( N % i == 0) {
                 if( i * i == N )
                         count++;
                 else       // i < sqrt(N) and (N / i) > sqrt(N)
                         count += 2;
              }
        }
        if(count == 2)
            cout << N << “ is a prime number.” << endl;
        else
            cout << N << “ is not a prime number.” << endl;
 }

vector<int> primes;
bool isprime[1000005]={0}; 
void seive() {
    isprime[0]=isprime[1]=1;
    for(int i=2;i<=1000000;i++){
        if(isprime[i]==0){
            for(int j=i*i;j<=1000000;j+=i){
                isprime[j]=1;
            }
            primes.push_back(i);
        }
    }
}


//Factorization in root(n)//
vector<int> factorize(int n) {
    vector<int> res;
    for (int i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            res.push_back(i);
            n /= i;
        }
    }
    if (n != 1) {
        res.push_back(n);
    }
    return res;
}

int binaryExponentiation(int x,int n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return binaryExponentiation(x*x,n/2);
    else                             //n is odd
        return x*binaryExponentiation(x*x,(n-1)/2);
}

int modularExponentiation(int x,int n,int M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)    
        return modularExponentiation((x*x)%M,n/2,M);
    else                         
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;
}




Proof of gcd(a,b) = gcd(b,a%b)
*****************************************
First, notice that in each iteration of the Euclidean algorithm the second argument strictly decreases, therefore (since the arguments are always non-negative) the algorithm will always terminate.

For the proof of correctness, we need to show that gcd(a,b)=gcd(b,amodb) for all a≥0, b>0.

We will show that the value on the left side of the equation divides the value on the right side and vice versa. Obviously, this would mean that the left and right sides are equal, which will prove Euclid's algorithm.

Let d=gcd(a,b). Then by definition d∣a and d∣b.

Now let's represent the remainder of the division of a by b as follows:
amodb=a−b⋅⌊ab⌋
From this it follows that d∣(amodb), which means we have the system of divisibilities:
{d∣b,d∣(amodb)
Now we use the fact that for any three numbers p, q, r, if p∣q and p∣r then p∣gcd(q,r). In our case, we get:
d=gcd(a,b)∣gcd(b,amodb)
Thus we have shown that the left side of the original equation divides the right. The second half of the proof is similar.
****************************************
int GCD(int A, int B) {
    if(B==0)
        return A;
    else
        return GCD(B, A % B);
}


************************************* BINARY GCD ********************************

// Stein's Algorithm 
int gcd(int a, int b) { 
    if (a == b) 
        return a; 
  
    // GCD(0, b) == b; GCD(a, 0) == a, 
    // GCD(0, 0) == 0 
    if (a == 0) 
        return b; 
    if (b == 0) 
        return a; 
  
    // look for factors of 2 
    if (~a & 1) // a is even 
    { 
        if (b & 1) // b is odd 
            return gcd(a >> 1, b); 
        else // both a and b are even 
            return gcd(a >> 1, b >> 1) << 1; 
    } 
  
    if (~b & 1) // a is odd, b is even 
        return gcd(a, b >> 1); 
  
    // reduce larger number 
    if (a > b) 
        return gcd((a - b) >> 1, b); 
  
    return gcd((b - a) >> 1, a); 
} 
// Complexity O(n^2), where n is numer if bits in larger number (from Knuth’s abstract model of a machine architecture)

int d, x, y;
void extendedEuclid(int A, int B) {
    if(B == 0) {
        d = A;
        x = 1;
        y = 0;
    }
    else {
        extendedEuclid(B, A%B);
        int temp = x;
        x = y;
        y = temp - (A/B)*y;
    }
}

int modInverse(int A, int M)
{
    extendedEuclid(A,M);
    return (x%M+M)%M;    //x may be negative
}

// when M is prime we can improve complexity of above code from O(m) to O(log M )

int modInverse(int A,int M)
{
    return modularExponentiation(A,M-2,M);
}

void checkprime(int N) {
        int count = 0;
        for( int i = 1;i * i <=N;++i ) {
             if( N % i == 0) {
                 if( i * i == N )
                         count++;
                 else       // i < sqrt(N) and (N / i) > sqrt(N)
                         count += 2;
              }
        }
        if(count == 2)
            cout << N << “ is a prime number.” << endl;
        else
            cout << N << “ is not a prime number.” << endl;
 }


Complwxity (sieve of erathosenes) O(n)*log(log(n))
vector<int> primes;
bool isprime[1000005]={0}; 
void seive() {
    isprime[0]=isprime[1]=1;
    for(int i=2;i<=1000000;i++){
        if(isprime[i]==0){
            for(int j=i*i;j<=1000000;j+=i){
                isprime[j]=1;
            }
            primes.push_back(i);
        }
    }
}


//Factorization in root(n)//
vector<int> factorize(int n) {
    vector<int> res;
    for (int i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            res.push_back(i);
            n /= i;
        }
    }
    if (n != 1) {
        res.push_back(n);
    }
    return res;
}

int binaryExponentiation(int x,int n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return binaryExponentiation(x*x,n/2);
    else                             //n is odd
        return x*binaryExponentiation(x*x,(n-1)/2);
}

int modularExponentiation(int x,int n,int M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)    
        return modularExponentiation((x*x)%M,n/2,M);
    else                         
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;
}
   



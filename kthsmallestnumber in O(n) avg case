// worst case is O(n^2) if you are too unlucky and and rand() gives n-1 pivot everytime, ohter in avg case it is O(n), also it is expected O(n) and have a proof with order statistics

/*
  ALREADY PASSED YOU DON'T NEED NO APPROVAL
*/
#include<bits/stdc++.h>

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define rep(i,a,b)  for(int i = a; i < b; i++)
#define repr(i,a,b)  for(int i = a; i >= b; i--)
#define Rep(i,a,b)  for(int i = a; i <= b; i++)
#define ff          first
#define ss          second
#define int         long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector <int>
#define mii         map <int,int>
#define sz(x) ((int)(x).size())
#define mxhi        priority_queue<int>
#define mnhi        priority_queue<int,vi,greater<int> >
#define mod         1000000007
#define setbits(x)  __builtin_popcountll(x)
#define zrobits(x)  __builtin_ctzll(x)   //no of zero bits befor the first set bits
#define inf         1e18
#define ps(x,y)     fixed<<setprecision(y)<<x
#define w(x)        int x; cin>>x; while(x--)
#define endl        '\n'
typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        PBDS;
int gcd(int a, int b) { return (b == 0) ? a : gcd(b, a % b); }
int lcm(int a, int b) { return (a / gcd(a, b)) * b; }
void i_n()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}
int helper(int arr[], int l, int r) {
    int pivot = rand() % (r - l + 1);
    swap(arr[l + pivot], arr[r]);
    // so now pivot is at r (for implemetation of bringing all elemnts to their correct side of pivot)
    int pivotele = arr[r];
    int i = l, j = l;
    while (j <= r - 1) {
        if (arr[j] <= pivotele) {
            swap(arr[i++], arr[j]);
        }
        j++;
    }
    swap(arr[i], arr[r]);
    return i;
}
int kthsmallest(int arr[], int l, int r, int k) {
    if (k > 0 and r - l + 1 >= k) {
        if (l == r) {
            return arr[l];
        }
        int pivot = helper(arr, l, r);
        if (pivot - l + 1 == k) {
            return arr[pivot];
        } else if (pivot - l + 1 > k) {
            return kthsmallest(arr, l, pivot - 1, k);
        } else {
            return kthsmallest(arr, pivot + 1, r, k - (pivot - l + 1));
        }
    } else {
        cout << l << " " << r << " ";
        return INT_MAX;
    }
}
int32_t main() {
    i_n();
    int arr[8] = {5, 9, 3, 1, 11, 4, 7, 2};
    cout << kthsmallest(arr, 0, 7, 1) << endl;
    cout << kthsmallest(arr, 0, 7, 2) << endl;
    cout << kthsmallest(arr, 0, 7, 3) << endl;
    cout << kthsmallest(arr, 0, 7, 5) << endl;
    cout << kthsmallest(arr, 0, 7, 6) << endl;
    cout << kthsmallest(arr, 0, 7, 8) << endl;
}
